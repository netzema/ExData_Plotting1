data(mtcars)
force(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
View(mtcars)
debug(ls)
ls
View(mtcars)
exit
Q
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags(,11:17)
flag_colors<- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(datasets)
data("mtcars")
force(mtcars)
View(mtcars)
?split
split(mtcars$hp, mtcars$cyl=4)
split(mtcars$hp, mtcars$cyl)
four_cyl <- split(mtcars$hp, mtcars$cyl)
four_cyl[,1]
dim(four_cyl
)
four_cyl
mean(four_cyl$`4`)
mean(four_cyl$`8`)
mean(four_cyl$`4`)-mean(four_cyl$`8`)
swirl()
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, calss, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
tapply(mtcars$hp, mtcars$cyl, mean)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
##Creats a matrix object which caches its inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function( matrix ) {
x <<- matrix
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## Computes the inverse of matrix returned "makeCacheMatrx".
## If Inverse has alreade been calculated, "cachesolve" should get the
## inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data) %*% data()
x$setinverse(i)
i
}
library(RMySQL)
uscDB <- dbConnect(MySQL(), user="genome",)
uscDB <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
ucscDB <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
View(uscDB)
result <- dbGetQuery(ucscDB, "show databases;"); dbDisconnect(ucscDB);
dbDisconnect(uscDB)
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
install.packages("rhdf5")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
BiocManager::install()
biocLite("rhdf5")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rhdf5")
devtools::install_github("andrie/gcalendr")
library(gcalendr)
calcalendar_auth(email="netzl.daniel@gmail.com")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
setwd("~/Online Kurse/Data Science Spezialisierung John Hopkins/Exploratory Data Analysis")
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col ="green", breaks = 100)
rug(ppm)
hist(ppm, col ="green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region,data = pollution, col = "red" )
par(mfrow=c(2,1), mar = c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col ="green")
with(pollution, plot)
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col =pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west<-subset(pollution, region == "west")
plot(west$latitude, west$pm25, main ="West")
plot(east$latitude, east$pm25, main ="East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Fyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(fafaithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm == TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab ="red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone)
points(may$Wind, may$Ozone, col = "blue", pch =8
)
points(may$Wind, may$Ozone, col = "blue", pch =17
)
notmay <- subset(airquality, Month != 5)
with(notmay, points(wind, ozone, col = "red", pch = 7))
with(notmay, points(Wind, Ozone, col = "red", pch = 7))
with(notmay, points(Wind, Ozone, col = "red", pch = 8))
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright", pch=c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v = median(airquality$Wind), lty=2, ltw = 2)
abline(v = median(airquality$Wind), lty=2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone,main = "Ozone and Wind")
with(airquality, plot(Ozone, Solar.R, main ="Ozone and Solar Radiation"))
plot(airquality$Ozone, airquality$Solar.R,
| main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R,main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R,main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone,
| main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone,main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main ="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(dplyr)
powerData <- filter(read.table("household_power_consumption.txt", sep =";", header = TRUE, na.strings = "?"),
Date == "01/02/2007" | Date == "02/02/2007")
View(powerData)
View(powerData)
powerData <- filter(read.table("household_power_consumption.txt", sep =";", header = TRUE, na.strings = "?"),
Date == "1/2/2007" | Date == "2/2/2007")
View(powerData)
View(powerData)
head(powerData)
tail(pwerData)
tail(powerData)
setwd("~/Online Kurse/Data Science Spezialisierung John Hopkins/Exploratory Data Analysis/Project Week 1")
setwd("~/Online Kurse/Data Science Spezialisierung John Hopkins/Exploratory Data Analysis/)
")
setwd("~/Online Kurse/Data Science Spezialisierung John Hopkins/Exploratory Data Analysis")
cd
setwd("~/Online Kurse/Data Science Spezialisierung John Hopkins/Exploratory Data Analysis/ExData_Plotting1")
hist(powerData$Global_active_power, main = "Global Active Power", col = "red", xlab = "Global Active Power (kilowatts")
png(fialename = "plot1.png")
hist(powerData$Global_active_power, main = "Global Active Power", col = "red", xlab = "Global Active Power (kilowatts)")
dev.off()
png(filename = "plot1.png")
hist(powerData$Global_active_power, main = "Global Active Power", col = "red", xlab = "Global Active Power (kilowatts)")
dev.off()
as.Date(powerData$Date)
powerData$Date <- as.Date(powerData$Date)
class(powerData$Date)
powerData$Date[0]
powerData$Date[1]
powerData$Date
tail(powerData$Date)
weekdays(powerData$Date[1])
grouped_by_weekdays <- mutate(powerData, wkday = weekdays(Date))
grouped_by_weekdays <- group_by(powerData, wkday)
grouped_by_weekdays <- group_by(grouped_by_weekdays, wkday)
head(grouped_by_weekdays)
summary(grouped_by_weekdays)
View(grouped_by_weekdays)
View(grouped_by_weekdays)
powerData <- mutate(powerData, dateTime = paste(Date, Time))
View(powerData)
View(powerData)
plot(x = powerData[,dateTime], y = powerData[, "Global_active_power"],
xlab = " ", ylab = "Global Active Power (kilowatts"))
#plotting the data using hist
plot(x = powerData[,dateTime], y = powerData[, "Global_active_power"],
xlab = " ", ylab = "Global Active Power (kilowatts)")
plot(x = powerData[,"dateTime"], y = powerData[, "Global_active_power"],
xlab = " ", ylab = "Global Active Power (kilowatts)")
with(powerData, plot(x = dateTime, y = Global_active_power],
xlab = " ", ylab = "Global Active Power (kilowatts)")
with(powerData, plot(x = dateTime, y = Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)"))
powerData[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
powerData$dateTime <- with(powerData$dateTime, as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S"))
powerData$dateTime <- with(powerData, as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S"))
powerData <- filter(read.table("household_power_consumption.txt", sep =";", header = TRUE, na.strings = "?"),
Date == "1/2/2007" | Date == "2/2/2007")
powerData <- mutate(powerData, dateTime = paste(Date, Time))
powerData$dateTime <- with(powerData, as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S"))
with(powerData, plot(x = dateTime, y = Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)"))
with(powerData, plot(x = dateTime, y = Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)",
type = 1))
with(powerData, plot(x = dateTime, y = Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)",
type = "1"))
#plotting the data using hist
with(powerData, plot(x = dateTime, y = Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)"))
with(powerData, plot(x = dateTime, y = Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)",
type = "l"))
#open png device
png(filename = "plot2.png", width = 480, height = 480)
#plotting the data using hist
with(powerData, plot(x = dateTime, y = Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)",
type = "l"))
#close the device and safe file to wd
dev.off()
with(powerData, plot(x = dateTime, y = Sub_metering1,
xlab = " ", ylab = "Energy sub metering",
type = "l"))
#read the data in, specifying the seperator, the NAs,
#only selecting the required days in Feb 2007
powerData <- filter(read.table("household_power_consumption.txt", sep =";", header = TRUE, na.strings = "?"),
Date == "1/2/2007" | Date == "2/2/2007")
#create a column with Dates and Times of the day
powerData <- mutate(powerData, dateTime = paste(Date, Time))
#make the dateTime column filter- and graphable
powerData$dateTime <- with(powerData, as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S"))
with(powerData, plot(x = dateTime, y = Sub_metering1,
xlab = " ", ylab = "Energy sub metering",
type = "l"))
with(powerData, plot(x = dateTime, y = Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l"))
with(powerData, lines(x = dateTime, y = Sub_metering_2, col = "red"))
with(powerData, lines(x = dateTime, y = Sub_metering_3, col = "blue"))
with(powerDate, legend("topright"), col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(powerData, legend("topright"), col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(powerData, legend("topright", col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")))
with(powerData, legend("topright", col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1)))
with(powerData, plot(x = dateTime, y = Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l"))
with(powerData, lines(x = dateTime, y = Sub_metering_2, col = "red"))
with(powerData, lines(x = dateTime, y = Sub_metering_3, col = "blue"))
with(powerData, legend("topright", col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1)))
with(powerData, plot(x = dateTime, y = Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l"))
with(powerData, lines(x = dateTime, y = Sub_metering_2, col = "red"))
with(powerData, lines(x = dateTime, y = Sub_metering_3, col = "blue"))
with(powerData, legend("topright", col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1)))
with(powerData, plot(x = dateTime, y = Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l"))
with(powerData, lines(x = dateTime, y = Sub_metering_2, col = "red"))
with(powerData, lines(x = dateTime, y = Sub_metering_3, col = "blue"))
legend("topright", col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1))
plot(x = powerDate$dateTime, y = powerDate$Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l")
plot(x = powerData$dateTime, y = powerData$Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l")
lines(x = powerData$dateTime, y = powerData$Sub_metering_2, col = "red")
lines(x = powerData$dateTime, y = powerData$Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1))
plot(x = powerData$dateTime, y = powerData$Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l")
lines(x = powerData$dateTime, y = powerData$Sub_metering_2, col = "red")
lines(x = powerData$dateTime, y = powerData$Sub_metering_3, col = "blue")
legend( col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1))
legend("topright",col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1))
legend("bottomright",col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1))
png(filename = "plot3.png", width = 480, height = 480)
#plotting the data using hist
plot(x = powerData$dateTime, y = powerData$Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l")
lines(x = powerData$dateTime, y = powerData$Sub_metering_2, col = "red")
lines(x = powerData$dateTime, y = powerData$Sub_metering_3, col = "blue")
legend("topright",col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1))
#close the device and safe file to wd
dev.off()
png(filename = "plotNIXE.png", width = 480, height = 480)
#plotting the data using hist
plot(x = powerData$dateTime, y = powerData$Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l")
lines(x = powerData$dateTime, y = powerData$Sub_metering_2, col = "red")
lines(x = powerData$dateTime, y = powerData$Sub_metering_3, col = "blue")
legend("topright",col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
#close the device and safe file to wd
dev.off()
par(mfcol = c(2,2))
with(powerData, plot(x = dateTime, y = Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)",
type = "l"))
powerData <- filter(read.table("household_power_consumption.txt", sep =";", header = TRUE, na.strings = "?"),
Date == "1/2/2007" | Date == "2/2/2007")
#create a column with Dates and Times of the day
powerData <- mutate(powerData, dateTime = paste(Date, Time))
#make the dateTime column filter- and graphable
powerData$dateTime <- with(powerData, as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S"))
with(powerData, plot(x = dateTime, y = Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)",
type = "l"))
plot(x = powerData$dateTime, y = powerData$Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l")
lines(x = powerData$dateTime, y = powerData$Sub_metering_2, col = "red")
lines(x = powerData$dateTime, y = powerData$Sub_metering_3, col = "blue")
legend("topright",col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1))
par("mfcol")
par(mfcol = c(2,2))
plot(x = powerData$dateTime, y = powerData$Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)",
type = "l")
plot(x = powerData$dateTime, y = powerData$Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)",
type = "l")
plot(x = powerData$dateTime, y = powerData$Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l")
lines(x = powerData$dateTime, y = powerData$Sub_metering_2, col = "red")
lines(x = powerData$dateTime, y = powerData$Sub_metering_3, col = "blue")
legend("topright",col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1))
plot(x = powerData$dateTime, y = powerData$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
plot(x = powerData$dateTime, y = powerData$Global_reactive_power, type = "l", xlab = "datetime", ylab = "Global_reactive_power")
#open png device
png(filename = "plot4.png", width = 480, height = 480)
#plotting the first plot
plot(x = powerData$dateTime, y = powerData$Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)",
type = "l")
#plotting the second plot (bottomleft)
plot(x = powerData$dateTime, y = powerData$Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l")
lines(x = powerData$dateTime, y = powerData$Sub_metering_2, col = "red")
lines(x = powerData$dateTime, y = powerData$Sub_metering_3, col = "blue")
legend("topright",col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1))
#plotting the third plot (topright)
plot(x = powerData$dateTime, y = powerData$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
#plotting fourth plot (bottomright)
plot(x = powerData$dateTime, y = powerData$Global_reactive_power, type = "l", xlab = "datetime", ylab = "Global_reactive_power")
#closing the device and safe file to wd
dev.off()
#open png device
png(filename = "plot4.png", width = 480, height = 480)
#specifying nr of plots in output
par(mfcol = c(2,2))
#plotting the first plot
plot(x = powerData$dateTime, y = powerData$Global_active_power,
xlab = " ", ylab = "Global Active Power (kilowatts)",
type = "l")
#plotting the second plot (bottomleft)
plot(x = powerData$dateTime, y = powerData$Sub_metering_1,
xlab = " ", ylab = "Energy sub metering",
type = "l")
lines(x = powerData$dateTime, y = powerData$Sub_metering_2, col = "red")
lines(x = powerData$dateTime, y = powerData$Sub_metering_3, col = "blue")
legend("topright",col = c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1,1), lwd = c(1,1))
#plotting the third plot (topright)
plot(x = powerData$dateTime, y = powerData$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
#plotting fourth plot (bottomright)
plot(x = powerData$dateTime, y = powerData$Global_reactive_power, type = "l", xlab = "datetime", ylab = "Global_reactive_power")
#closing the device and safe file to wd
dev.off()
